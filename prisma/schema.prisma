// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  avatarUrl String?
  password String?
  profile Profile?
  posts Post[]
  comments Comment[]
  likes Like[]
  chats Chat[]
  messages Message[]
  accounts Account[]
  tokens Token[]



}

model Profile {
  id String @id @default(cuid())
  bio String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Post {
  id String @id @default(cuid())
  title String
  content String
  imageUrl String
  published Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  comments Comment[]
  likes Like[]
  categories Category[]
}

model Comment {
    id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("comment_children")
  parentId  String?
}

model Category {
  id       String    @id @unique @default(uuid())
  label    String
  value    String    @unique
  posts    Post[]

}


model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}



model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Chat {
  id String @id @default(cuid())
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
